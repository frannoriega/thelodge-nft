//SPDX-License-Identifier: Unlicense
pragma solidity >=0.8.4 <0.9.0;

import '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';

/// @notice Handles everything related to the revelation process.
interface ITheLodgeRevelationHandler {
  /// @notice Thrown when configuring the VRF Coordinator using the zero address.
  error ZeroAddress();

  /// @notice Thrown when there's a call to fulfill the randomness, but a previous
  /// call was already made.
  error AlreadyRevealed();

  /// @notice Emitted when the randomness is fulfilled.
  /// @param number The random number generated by the VRF Coordinator.
  event Revealed(uint256 number);

  /// @notice Returns the random number.
  /// @return The random number.
  function randomNumber() external view returns (uint256);

  /// @notice Returns whether the reveal was already made or not.
  /// @return Whether the reveal was already made or not.
  function revealed() external view returns (bool);

  /// @notice Returns the address of the Chainlink's VRF Coordinator.
  /// @return The VRF Coordinator.
  function coordinator() external view returns (VRFCoordinatorV2Interface);

  /// @notice Triggers the reveal. This will send a request to the VRF Coordinator
  /// to generate a random number.
  /// @dev While this method can be called multiple times, only one request can be
  /// fulfilled. It's recommended that this method is called only once, or called
  /// again if the request failed; in order to save gas.
  function reveal() external;

  /// @notice Sets the Chainlink's subscription ID.
  /// @param __subId The new Chainlink's subscription ID.
  function setSubId(uint64 __subId) external;
}
